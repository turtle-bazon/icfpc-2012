
(in-package :lambda-lifter)

(defun in-range-p (metadata x y)
  (with-meta-bind (metadata width height)
    (and (>= x 1)
	 (>= y 1)
	 (<= x width)
	 (<= y height))))

(defmacro rock-move-values (world objects path metadata rx ry rx-new ry-new &optional (non-map-update nil))
  `(values (lambda (x y)
	     (cond ((and (= x ,rx)
			 (= y ,ry))
		    nil)
		   ((and (= x ,rx-new)
			 (= y ,ry-new))
		    :rock)
		   (t (funcall ,world x y))))
	   (lambda (type)
	     (case type
	       (:rock (cons (complex ,rx-new ,ry-new)
			    (remove (complex ,rx ,ry) (funcall ,objects :rock))))
	       (:injury (if ,non-map-update
			    nil
                            (with-robot-coords (rbx rby) objects
			      (when (and (= ,rx-new rbx)
					 (= (- ,ry-new 1) rby))
				t))))
	       (t (funcall ,objects type))))
	   ,path
	   ,metadata))

(defun rock-fall (rx ry)
  (lambda (world objects path metadata)
    (let ((rx-under rx)
	  (ry-under (- ry 1)))
      (when (and (in-range-p metadata rx-under ry-under)
		 (eq nil (funcall world rx-under ry-under)))
	(rock-move-values world objects path metadata rx ry rx-under ry-under)))))

(defun rock-slide-right (rx ry)
  (lambda (world objects path metadata)
    (let ((rx-under rx)
	  (ry-under (- ry 1))
	  (rx-right (+ rx 1))
	  (ry-right ry)
	  (rx-right-under (+ rx 1))
	  (ry-right-under (- ry 1)))
      (when (and (in-range-p metadata rx-right-under ry-right-under)
		 (eq :rock (funcall world rx-under ry-under))
		 (eq nil (funcall world rx-right ry-right))
		 (eq nil (funcall world rx-right-under ry-right-under)))
	(rock-move-values world objects path metadata rx ry rx-right-under ry-right-under)))))

(defun rock-slide-left (rx ry)
  (lambda (world objects path metadata)
    (let ((rx-under rx)
	  (ry-under (- ry 1))
	  (rx-right (+ rx 1))
	  (ry-right ry)
	  (rx-right-under (+ rx 1))
	  (ry-right-under (- ry 1))
	  (rx-left (- rx 1))
	  (ry-left ry)
	  (rx-left-under (- rx 1))
	  (ry-left-under (- ry 1)))
      (when (and (in-range-p metadata rx-left-under ry-left-under)
		 (in-range-p metadata rx-right-under ry-right-under)
		 (eq :rock (funcall world rx-under ry-under))
		 (not (eq nil (funcall world rx-right ry-right)))
		 (not (eq nil (funcall world rx-right-under ry-right-under)))
		 (eq nil (funcall world rx-left ry-left))
		 (eq nil (funcall world rx-left-under ry-left-under)))
	(rock-move-values world objects path metadata rx ry rx-left-under ry-left-under)))))

(defun rock-slide-right-over-lambda (rx ry)
  (lambda (world objects path metadata)
    (let ((rx-under rx)
	  (ry-under (- ry 1))
	  (rx-right (+ rx 1))
	  (ry-right ry)
	  (rx-right-under (+ rx 1))
	  (ry-right-under (- ry 1)))
      (when (and (in-range-p metadata rx-right-under ry-right-under)
		 (eq :lambda (funcall world rx-under ry-under))
		 (eq nil (funcall world rx-right ry-right))
		 (eq nil (funcall world rx-right-under ry-right-under)))
	(rock-move-values world objects path metadata rx ry rx-right-under ry-right-under)))))

(defun rock-push-left (rx ry)
  (lambda (world objects path metadata)
    (let ((rx-left (- rx 1))
	  (ry-left ry))
      (when (and (in-range-p metadata rx-left ry-left)
		 (eq nil (funcall world rx-left ry-left)))
	(rock-move-values world objects path metadata rx ry rx-left ry-left t)))))

(defun rock-push-right (rx ry)
  (lambda (world objects path metadata)
    (let ((rx-right (+ rx 1))
	  (ry-right ry))
      (when (and (in-range-p metadata rx-right ry-right)
		 (eq nil (funcall world rx-right ry-right)))
	(rock-move-values world objects path metadata rx ry rx-right ry-right t)))))

(defun rock-can-be-pushed-left (world metadata rx ry)
  (let ((rx-left (- rx 1))
	(ry-left ry))
    (and (in-range-p metadata rx-left ry-left)
	 (eq nil (funcall world rx-left ry-left)))))

(defun rock-can-be-pushed-right (world metadata rx ry)
  (let ((rx-right (+ rx 1))
	(ry-right ry))
    (and (in-range-p metadata rx-right ry-right)
	 (eq nil (funcall world rx-right ry-right)))))

(defun rock-move (rx ry)
  (lambda (world objects path metadata)
    (or (funcall (rock-fall rx ry) world objects path metadata)
	(funcall (rock-slide-right rx ry) world objects path metadata)
	(funcall (rock-slide-left rx ry) world objects path metadata)
	(funcall (rock-slide-right-over-lambda rx ry) world objects path metadata))))

(defun rocks-move (world objects path metadata)
  (values world objects path metadata))

